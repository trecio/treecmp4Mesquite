/* * StatCalculator.java * * Created on 7 marzec 2008, 00:29 * * To change this template, choose Tools | Template Manager * and open the template in the editor. */package treecmp.common;import java.util.ArrayList;import pal.tree.Tree;import treecmp.metric.Metric;/** * * @author Damian */public class StatCalculator implements Metric { /** Creates a new instance of StatCalculator */    private Metric met;    private boolean findMaxDistTrees;    private boolean findMinDistTrees;    private ArrayList< Tree[]> maxDistTrees;    private ArrayList< Tree[]> minDistTrees;    private int maxTreesListSize;    private int matrixDim;        private  ArrayList< Double> valuesHolder;    protected int count;    protected double sum;    protected double sq_sum;    protected double min;    protected double max;    protected boolean recordValues;        public StatCalculator() {                this.count=0;        this.sum=0.0;        this.sq_sum=0.0;                this.min=Double.MAX_VALUE;        this.max=Double.MIN_VALUE;        this.findMaxDistTrees=false;        this.findMinDistTrees=false;        maxDistTrees= new ArrayList< Tree[]>();        minDistTrees= new ArrayList< Tree[]>();        valuesHolder=new ArrayList< Double>();        this.maxTreesListSize=Integer.MAX_VALUE;        this.recordValues=false;            }        /**     * This feature is disabled by default.      * @param _findExtremalTrees     */    public void setFindMaxDistTrees(boolean _findMaxDistTrees)    {       this.findMaxDistTrees=_findMaxDistTrees;    }    public void setMaxTreesListSize(int maxTreesListSize) {        this.maxTreesListSize = maxTreesListSize;    }        /**    * This feature is disabled by default.     * @param _findMinDistTrees    */     public void setFindMinDistTrees(boolean _findMinDistTrees)    {       this.findMinDistTrees=_findMinDistTrees;    }    /**     *      * @param _met     */    public StatCalculator(Metric _met) {              //call non-parameter constructor        this();              this.met=_met;           }    public StatCalculator(Metric _met, int _matrixDim)    {        this(_met);        matrixDim=_matrixDim;    }    public void addMetric(Metric _met)    {        this.met=_met;        this.clear();            }           public void clear()  {        this.count=0;        this.sum=0.0;        this.sq_sum=0.0;                this.min=Double.MAX_VALUE;        this.max=Double.MIN_VALUE;                this.maxDistTrees.clear();        this.minDistTrees.clear();        this.valuesHolder.clear();    }    public ArrayList<Tree[]> getMaxDistTrees() {        return maxDistTrees;    }    public ArrayList<Tree[]> getMinDistTrees() {        return minDistTrees;    }  public double getMax()  {   return this.max;  }  public double getMin()  {    return this.min;  }  public double getAvg()  {      double avg=Double.POSITIVE_INFINITY;      if (count>0)           avg=this.sum/(double)count;            return avg;  }    public double getVariance()  {      double var=Double.POSITIVE_INFINITY;      double avg;      if (count>0)      {          avg=this.getAvg();          var=this.sq_sum/(double)count-avg*avg;      }      return var;  }    public double getStd()  {        double std=Double.POSITIVE_INFINITY;        double var;                if(count>0)        {            var=this.getVariance();            std=Math.sqrt(var);                            }        return std;  }       public int getCount()  {      return this.count;  }                        public double getDistance(Tree t1, Tree t2) {                double dist=met.getDistance(t1, t2);                sum+=dist;        count++;        sq_sum+=dist*dist;                if (this.findMaxDistTrees)            updateMaxTrees(dist,t1,t2);                if (this.findMinDistTrees)            updateMinTrees(dist,t1,t2);                if(dist<min) min=dist;        if(dist>max) max=dist;        if(this.recordValues)            addValue(dist);        return dist;    }    public String getName() {        return this.met.getName();    }     public String getCommandLineName() {        return this.met.getCommandLineName();    }    public void setCommandLineName(String commandLineName) {        this.met.setCommandLineName(commandLineName);    }    public void setName(String name) {        this.met.setName(name);    }    public String getDescription() {        return this.met.getDescription();    }    public void setDescription(String description) {        this.met.setDescription(description);    }    private void updateMaxTrees(double dist, Tree t1, Tree t2)    {             Tree[] treePair=new Tree[2];        treePair[0]=t1;        treePair[1]=t2;                if(dist==max&& this.maxDistTrees.size()<this.maxTreesListSize)        {            //add pair to maxDist list            this.maxDistTrees.add(treePair);                    }else if(dist>max)        {            this.maxDistTrees.clear();            this.maxDistTrees.add(treePair);                }                }        private void updateMinTrees(double dist, Tree t1, Tree t2)    {             Tree[] treePair=new Tree[2];        treePair[0]=t1;        treePair[1]=t2;                            if(dist==min && this.minDistTrees.size()<this.maxTreesListSize)        {            //add pair to minDist list            this.minDistTrees.add(treePair);                    }else if(dist<min)        {            this.minDistTrees.clear();            this.minDistTrees.add(treePair);                }           }    protected void addValue(double dist)    {        this.valuesHolder.add(dist);    }    public boolean isRecordValues() {        return recordValues;    }    public void setRecordValues(boolean recordValues) {        this.recordValues = recordValues;    }    public ArrayList<Double> getValuesHolder() {        return valuesHolder;    }}