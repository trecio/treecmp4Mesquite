/* * TreeReader.java * * Created on 18 marzec 2007, 17:47 * * To change this template, choose Tools | Template Manager * and open the template in the editor. */package treecmp;import java.io.*;import pal.tree.ReadTree;import pal.tree.TreeParseException;/** * * @author VOX */public class TreeReader {    private FileInputStream FIStream;    private BufferedInputStream BIStream;    private String FileName;    private int numberOfTrees;    private int step;    private boolean isFirstTree;    public int getStep() {        return step;    }    public void setStep(int step) {        this.step = step;    }    public int getNumberOfTrees() {        return numberOfTrees;    }    public int getEffectiveNumberOfTrees() {                if(this.numberOfTrees==0)            return 0;        else            return 1+(this.numberOfTrees-1)/this.step;    }    /** Creates a new instance of TreeReader */    public TreeReader(String filename) {        this.step=1;        this.FileName = filename;    }    public int open() {        isFirstTree=true;        try {            this.FIStream = new FileInputStream(this.FileName);            this.BIStream = new BufferedInputStream(this.FIStream);        } catch (FileNotFoundException e) {            System.out.println("File Not Found");            return -1;        }        return 0;    }    public void close() {        try {            //this.FIStream.close();            this.BIStream.close();        } catch (IOException ex) {            ex.printStackTrace();        }    }    private String readUntil(char c) {        int i;        char ch;        //String temp = new String("");        StringBuilder s = new StringBuilder(8192);        try {            do {                //i = this.FIStream.read();                i = this.BIStream.read();                if (i != -1 && i != (int) c) {                    ch = (char) i;                    //temp = temp.concat(Character.toString(ch));                    s.append(ch);                }            } while (i != -1 && i != (int) c);        } catch (IOException ex) {            ex.printStackTrace();        }        //return temp;        return s.toString();    }    public String readNextTreeString() {        int i;        char ch;        String temp = new String("");        try {            do {                //i = this.FIStream.read();                i = this.BIStream.read();            } while (i != -1 && i != '(');            if (i != -1) {                temp = "(" + readUntil(';') + ";";            } else {                temp = null;            }        } catch (IOException ex) {            ex.printStackTrace();        }        return temp;    }    public pal.tree.Tree readNextTree() {        ReadTree tree = null;        String treeString=null;        int i,iStep;        try {                        //We want first tree in input file be always read                        if(this.isFirstTree)            {                iStep=1;                this.isFirstTree=false;            }            else                iStep=this.step;               for(i=1;i<=iStep;i++)            {                treeString = this.readNextTreeString();            }            if (treeString != null) {                pal.io.InputSource in1 = pal.io.InputSource.openString(treeString);                tree = new ReadTree(in1);            }        } catch (TreeParseException ex) {            ex.printStackTrace();        }        return tree;    }public int scan(){    int counter=0;    while(readNextTree()!=null)    {     counter++;    }    this.numberOfTrees=counter;    return counter;}}